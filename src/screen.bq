vga :: @import("vga.bq");
Color :: vga.Color;

Screen :: struct {
    buffer: ScreenBuffer,
}

ScreenCharacter :: struct {
    ascii_character: u8,
    backfront_color: u8,
}

ScreenBuffer :: struct {
    characters: [*]ScreenCharacter,
    current_column: usize,
    current_row: usize,
}

clear :: fn (screen: *Screen, background: Color, foreground: Color) {
    screen.buffer.current_row = 0;
    screen.buffer.current_column = 0;

    row: usize = 0;

    while row < vga.buffer_height {
        column: usize = 0;

        while column < vga.buffer_width {
            index := row * vga.buffer_width + column;

            screen.buffer.characters[index].ascii_character = ' ';
            screen.buffer.characters[index].backfront_color = (background as u8 << 4) | foreground;

            column += 1;
        }

        row += 1;
    }
}

write :: fn (screen: *Screen, ascii_character: u8, background: Color, foreground: Color) {
    switch (ascii_character) {
        '\n' => {
            if (screen.buffer.current_row += 1) == vga.buffer_height {
                screen.buffer.current_row = 0;
            }

            screen.buffer.current_column = 0;
        },

        else => {
            index := screen.buffer.current_row * vga.buffer_width + screen.buffer.current_column;

            screen.buffer.characters[index].ascii_character = ascii_character;
            screen.buffer.characters[index].backfront_color = (background as u8 << 4) | foreground;

            if (screen.buffer.current_column += 1) == vga.buffer_width {
                screen.buffer.current_column = 0;

                if (screen.buffer.current_row += 1) == vga.buffer_height {
                    screen.buffer.current_row = 0;
                }
            }
        }
    }
}

print :: fn (screen: *Screen, string: [*]const u8) {
    while string.* != 0 {
        write(screen, string.*, Color.black, Color.white);

        string += 1;
    }
}
