import "vga.cerm";
import "screen.cerm";

asm {
    ".set ALIGN,    1<<0             /* align loaded modules on page boundaries */"
    ".set MEMINFO,  1<<1             /* provide memory map */"
    ".set FLAGS,    ALIGN | MEMINFO  /* this is the Multiboot 'flag' field */"
    ".set MAGIC,    0x1BADB002       /* 'magic number' lets bootloader find the header */"
    ".set CHECKSUM, -(MAGIC + FLAGS) /* checksum of above, to prove we are multiboot */"
    ""
    ".section .multiboot"
    ".align 4"
    ".long MAGIC"
    ".long FLAGS"
    ".long CHECKSUM"
    ""
    ".section .bss"
    ".align 16"
    "stack_bottom:"
    ".skip 16384"
    "stack_top:"
    ""
    ""
    ".section .text"
    ".global _start"
    "_start:"
    "    mov $stack_top, %esp"
    "    mov $stack_top, %ebp"
    ""
    "    call kmain"
    "    call hlt_loop"
}

export fn hlt_loop() {
    asm { "cli" };

    while true {
        asm { "hlt" };
    }
}

export fn kmain() {
    var screen screen::Screen;

    screen.buffer.characters = vga::buffer::address as [*]screen::Screen::Character;
    screen.buffer.current_column = 0;
    screen.buffer.current_row = 0;

    screen::Screen::clear(&screen, vga::Color::black, vga::Color::white);

    screen::Screen::print(&screen, "Welcome to our EPIC HELLO WORLD CLUB!\n\n");

    screen::Screen::print(&screen, "Hello, World!\n");
    screen::Screen::print(&screen, "Hello, World!\n");
    screen::Screen::print(&screen, "Hello, World!\n");

    hlt_loop();
}
